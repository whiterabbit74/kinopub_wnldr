const state = {
    theme: localStorage.getItem('theme') || 'light',
    currentStep: 'file-selection', // file-selection, track-selection, download-settings
    filePath: null,
    fileName: null,
    videoTracks: [],
    audioTracks: [],
    selectedVideo: null,
    selectedAudio: null,
    downloadFolder: null,
    downloadResultPath: null,
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã - –ø–æ–ª—É—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
let themeToggle, themeIcon, themeText, backBtn, nextBtn, dropZone, fileInput, errorMessage;
let fileMeta, fileNameLabel, analyzeBtn, tracksSection, videoTracksList, audioTracksList;
let settingsSection, threadRange, threadValue, filenameInput, downloadPath, selectFolderBtn;
let downloadBtn, progressContainer, progressFill, progressPercent, progressStatus, progressStages;
let logContainer, logToggle, logContent, successSection, showFileBtn, downloadError;

// –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
let isRenderingTracks = false;
let isDownloading = false;
let currentProgressListener = null;

function initDomElements() {
    themeToggle = document.getElementById('themeToggle');
    themeIcon = document.getElementById('themeIcon');
    themeText = document.getElementById('themeText');
    backBtn = document.getElementById('backBtn');
    nextBtn = document.getElementById('nextBtn');
    dropZone = document.getElementById('dropZone');
    fileInput = document.getElementById('fileInput');
    errorMessage = document.getElementById('errorMessage');
    fileMeta = document.getElementById('fileMeta');
    fileNameLabel = document.getElementById('fileName');
    analyzeBtn = document.getElementById('analyzeBtn');
    tracksSection = document.getElementById('tracksSection');
    videoTracksList = document.getElementById('videoTracks');
    audioTracksList = document.getElementById('audioTracks');
    settingsSection = document.getElementById('settingsSection');
    threadRange = document.getElementById('threadRange');
    threadValue = document.getElementById('threadValue');
    filenameInput = document.getElementById('filename');
    downloadPath = document.getElementById('downloadPath');
    selectFolderBtn = document.getElementById('selectFolderBtn');
    downloadBtn = document.getElementById('downloadBtn');
    progressContainer = document.getElementById('progressContainer');
    progressFill = document.getElementById('progressFill');
    progressPercent = document.getElementById('progressPercent');
    progressStatus = document.getElementById('progressStatus');
    progressStages = document.getElementById('progressStages');
    logContainer = document.getElementById('logContainer');
    logToggle = document.getElementById('logToggle');
    logContent = document.getElementById('logContent');
    successSection = document.getElementById('successSection');
    showFileBtn = document.getElementById('showFileBtn');
    downloadError = document.getElementById('downloadError');
}

function applyTheme() {
    document.documentElement.setAttribute('data-theme', state.theme);
    if (state.theme === 'dark') {
        themeIcon.textContent = '‚òÄÔ∏è';
        themeText.textContent = '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
    } else {
        themeIcon.textContent = 'üåô';
        themeText.textContent = '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
    }
}

function showStep(stepName) {
    // Hide all steps
    document.querySelectorAll('.step').forEach(step => {
        step.hidden = true;
    });

    // Show current step
    const currentStepElement = document.getElementById(stepName);
    if (currentStepElement) {
        currentStepElement.hidden = false;
    }

    // Update back button visibility
    const backBtn = document.getElementById('backBtn');
    if (backBtn) {
        backBtn.style.display = stepName === 'file-selection' ? 'none' : 'block';
    }

    state.currentStep = stepName;
}

function goToNextStep() {
    if (state.currentStep === 'file-selection') {
        showStep('track-selection');
    } else if (state.currentStep === 'track-selection') {
        showStep('download-settings');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        initializeDownloadPath();
        updateDownloadButton();
    }
}

function goToPreviousStep() {
    if (state.currentStep === 'track-selection') {
        showStep('file-selection');
    } else if (state.currentStep === 'download-settings') {
        showStep('track-selection');
    }
}

function toggleTheme() {
    state.theme = state.theme === 'light' ? 'dark' : 'light';
    localStorage.setItem('theme', state.theme);
    applyTheme();
}

function showError(container, message) {
    container.textContent = message;
    container.style.display = 'block';
}

function hideError(container) {
    container.style.display = 'none';
}

function resetTracks() {
    state.videoTracks = [];
    state.audioTracks = [];
    state.selectedVideo = null;
    state.selectedAudio = null;
    videoTracksList.innerHTML = '';
    audioTracksList.innerHTML = '';
}

function formatBandwidth(bandwidth) {
    if (typeof bandwidth !== 'number') {
        const parsed = Number(bandwidth);
        if (!Number.isFinite(parsed)) {
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        }
        bandwidth = parsed;
    }
    if (bandwidth >= 1_000_000) {
        return `${(bandwidth / 1_000_000).toFixed(1)} –ú–±–∏—Ç/—Å`;
    }
    if (bandwidth >= 1_000) {
        return `${(bandwidth / 1_000).toFixed(1)} –∫–±–∏—Ç/—Å`;
    }
    return `${bandwidth} –±–∏—Ç/—Å`;
}

function createTrackElement(track, type) {
    const element = document.createElement('button');
    element.type = 'button';
    element.className = 'track-item';
    element.dataset.type = type;
    element.dataset.id = track.id;

    // Radio button indicator
    const radio = document.createElement('div');
    radio.className = 'track-radio';

    // Track info container
    const info = document.createElement('div');
    info.className = 'track-info';

    const title = document.createElement('div');
    title.className = 'track-title';
    if (type === 'video') {
        const resolution = track.resolution || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        title.textContent = `${resolution}`;
    } else {
        title.textContent = track.name || `–ê—É–¥–∏–æ #${track.id + 1}`;
    }

    const details = document.createElement('div');
    details.className = 'track-details';
    if (type === 'video') {
        const parts = [];
        if (track.bandwidth) parts.push(`${formatBandwidth(track.bandwidth)}`);
        if (track.codec) parts.push(`${track.codec}`);
        if (track.frame_rate) parts.push(`${track.frame_rate} FPS`);
        details.textContent = parts.join(' ‚Ä¢ ') || '–û—Å–Ω–æ–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
    } else {
        const parts = [];
        if (track.language) parts.push(`${track.language.toUpperCase()}`);
        if (track.is_default) parts.push('–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        if (track.codec) parts.push(`${track.codec}`);
        details.textContent = parts.join(' ‚Ä¢ ') || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–≤—É–∫';
    }

    info.appendChild(title);
    info.appendChild(details);
    element.appendChild(radio);
    element.appendChild(info);
    return element;
}

function renderTracks() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º race condition
    if (isRenderingTracks) {
        return;
    }
    isRenderingTracks = true;

    try {
        if (!videoTracksList || !audioTracksList) {
            console.error('DOM elements not ready for renderTracks');
            return;
        }

        videoTracksList.innerHTML = '';
        audioTracksList.innerHTML = '';

        state.videoTracks.forEach((track) => {
            const element = createTrackElement(track, 'video');
            if (state.selectedVideo === track.id) {
                element.classList.add('selected');
            }
            element.addEventListener('click', () => {
                if (!isRenderingTracks) {
                    state.selectedVideo = track.id;
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounced –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
                    debounceRenderTracks();
                    updateNextButton();
                }
            });
            videoTracksList.appendChild(element);
        });

    const emptyAudio = document.createElement('button');
    emptyAudio.type = 'button';
    emptyAudio.className = 'track-item';
    emptyAudio.dataset.type = 'audio';
    emptyAudio.dataset.id = '-1';

    const radio = document.createElement('div');
    radio.className = 'track-radio';

    const info = document.createElement('div');
    info.className = 'track-info';

    const title = document.createElement('div');
    title.className = 'track-title';
    title.textContent = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ';

    const details = document.createElement('div');
    details.className = 'track-details';
    details.textContent = '–û—Ç–¥–µ–ª—å–Ω–∞—è –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ –Ω–µ —Å–∫–∞—á–∞–µ—Ç—Å—è';

    info.appendChild(title);
    info.appendChild(details);
    emptyAudio.appendChild(radio);
    emptyAudio.appendChild(info);
    if (state.selectedAudio === null) {
        emptyAudio.classList.add('selected');
    }
    emptyAudio.addEventListener('click', () => {
        if (!isRenderingTracks) {
            state.selectedAudio = null;
            debounceRenderTracks();
            updateNextButton();
        }
    });
    audioTracksList.appendChild(emptyAudio);

    state.audioTracks.forEach((track) => {
        const element = createTrackElement(track, 'audio');
        if (state.selectedAudio === track.id) {
            element.classList.add('selected');
        }
        element.addEventListener('click', () => {
            if (!isRenderingTracks) {
                state.selectedAudio = track.id;
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounced –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
                debounceRenderTracks();
                updateNextButton();
            }
        });
        audioTracksList.appendChild(element);
    });
    } finally {
        isRenderingTracks = false;
    }
}

// Debounced –≤–µ—Ä—Å–∏—è renderTracks –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
let renderTracksTimeout = null;
function debounceRenderTracks() {
    if (renderTracksTimeout) {
        clearTimeout(renderTracksTimeout);
    }
    renderTracksTimeout = setTimeout(() => {
        renderTracks();
        renderTracksTimeout = null;
    }, 50);
}


function updateThreadValue() {
    threadValue.textContent = threadRange.value;
}

function validateFileName(filename) {
    if (!filename || typeof filename !== 'string') {
        return false;
    }
    const trimmed = filename.trim();
    if (trimmed.length === 0 || trimmed.length > 200) {
        return false;
    }
    // Check for invalid characters
    const invalidChars = /[<>:"/\\|?*]/;
    return !invalidChars.test(trimmed);
}

function validateDownloadFolder(path) {
    return Boolean(path && typeof path === 'string' && path.trim().length > 0);
}

function updateNextButton() {
    if (nextBtn) {
        const hasVideo = state.selectedVideo !== null && state.selectedVideo !== undefined;
        nextBtn.disabled = !hasVideo;
    }
}

function updateDownloadButton() {
    if (!downloadBtn || !filenameInput) {
        console.error('Download button or filename input not found');
        return;
    }

    const hasFile = Boolean(state.filePath);
    const hasVideo = state.selectedVideo !== null && state.selectedVideo !== undefined;
    const hasFolder = validateDownloadFolder(state.downloadFolder);
    const hasName = validateFileName(filenameInput.value);

    downloadBtn.disabled = !(hasFile && hasVideo && hasFolder && hasName);
}

function resetProgress() {
    ProgressTracker.reset();
    progressFill.style.width = '0%';
    progressPercent.textContent = '0%';
    progressStatus.textContent = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞‚Ä¶';
    progressContainer.style.display = 'none';
    successSection.style.display = 'none';
    resetStages();
    clearLog();
}

function resetStages() {
    const stages = progressStages.querySelectorAll('.stage');
    stages.forEach(stage => {
        stage.classList.remove('active', 'completed');
    });
}

function setStageActive(stageType) {
    resetStages();
    const stage = progressStages.querySelector(`[data-stage="${stageType}"]`);
    if (stage) {
        stage.classList.add('active');
    }
}

function setStageCompleted(stageType) {
    const stage = progressStages.querySelector(`[data-stage="${stageType}"]`);
    if (stage) {
        stage.classList.remove('active');
        stage.classList.add('completed');
    }
}

function clearLog() {
    logContent.innerHTML = '';
}

function addLogEntry(message, type = 'info') {
    if (!logContent) {
        console.error('Log content element not ready');
        return;
    }

    const entry = document.createElement('div');
    entry.className = `log-entry ${type}`;

    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ HTML
    const sanitizedMessage = String(message).replace(/[<>&"']/g, (char) => {
        const entities = {
            '<': '&lt;',
            '>': '&gt;',
            '&': '&amp;',
            '"': '&quot;',
            "'": '&#x27;'
        };
        return entities[char];
    });

    entry.textContent = `${new Date().toLocaleTimeString()} - ${sanitizedMessage}`;
    logContent.appendChild(entry);
    logContent.scrollTop = logContent.scrollHeight;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ (–º–∞–∫—Å–∏–º—É–º 100)
    const entries = logContent.querySelectorAll('.log-entry');
    if (entries.length > 100) {
        logContent.removeChild(entries[0]);
    }
}

function toggleLog() {
    const isExpanded = logContent.classList.contains('expanded');
    if (isExpanded) {
        logContent.classList.remove('expanded');
        logToggle.textContent = '‚Üì';
    } else {
        logContent.classList.add('expanded');
        logToggle.textContent = '‚Üë';
    }
}

function handleFile(file) {
    if (!file) return;

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!file.name.toLowerCase().endsWith('.m3u8')) {
        showError(errorMessage, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .m3u8');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB –¥–ª—è M3U8)
    if (file.size > 10 * 1024 * 1024) {
        showError(errorMessage, '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. M3U8 —Ñ–∞–π–ª—ã –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ 10MB.');
        return;
    }

    // M3U8 —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ MIME —Ç–∏–ø—ã –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ—Ç—å –∏—Ö
    // –ü–æ—ç—Ç–æ–º—É –ø–æ–ª–∞–≥–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

    hideError(errorMessage);
    state.filePath = file.path;
    state.fileName = file.name;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
    analyzeFileAndProceed();
}

async function analyzeFileAndProceed() {
    if (!state.filePath) return;

    try {
        hideError(errorMessage);
        resetTracks();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ (30 —Å–µ–∫)')), 30000);
        });

        const tracksPromise = window.electronAPI.getTracks(state.filePath);
        const tracks = await Promise.race([tracksPromise, timeoutPromise]);
        state.videoTracks = Array.isArray(tracks.video) ? tracks.video : [];
        state.audioTracks = Array.isArray(tracks.audio) ? tracks.audio : [];

        if (state.videoTracks.length === 0) {
            showError(errorMessage, '–í–∏–¥–µ–æ-–¥–æ—Ä–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.');
            return;
        }

        state.selectedVideo = state.videoTracks[0]?.id ?? null;
        state.selectedAudio = null;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const baseName = state.fileName.replace(/\.m3u8$/i, '');
        filenameInput.value = baseName;

        renderTracks();
        updateNextButton();
        showStep('track-selection');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:', error);
        const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        showError(errorMessage, `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª: ${message}`);
    }
}

async function analyzeFile() {
    if (!state.filePath) return;
    try {
        analyzeBtn.disabled = true;
        analyzeBtn.textContent = '–ê–Ω–∞–ª–∏–∑...';
        hideError(errorMessage);
        resetTracks();

        const tracks = await window.electronAPI.getTracks(state.filePath);
        state.videoTracks = Array.isArray(tracks.video) ? tracks.video : [];
        state.audioTracks = Array.isArray(tracks.audio) ? tracks.audio : [];

        if (state.videoTracks.length === 0) {
            showError(errorMessage, '–í–∏–¥–µ–æ-–¥–æ—Ä–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.');
            analyzeBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Ä–æ–∂–∫–∏';
            analyzeBtn.disabled = false;
            return;
        }

        state.selectedVideo = state.videoTracks[0]?.id ?? null;
        state.selectedAudio = null;

        tracksSection.hidden = false;
        renderTracks();
        revealSettings();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:', error);
        const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        showError(errorMessage, `–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª: ${message}`);
    } finally {
        analyzeBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Ä–æ–∂–∫–∏';
        analyzeBtn.disabled = false;
    }
}

async function initializeDownloadPath() {
    try {
        const defaultPath = await window.electronAPI.getDownloadsPath();
        if (defaultPath) {
            state.downloadFolder = defaultPath;
            downloadPath.textContent = defaultPath;
            downloadPath.title = defaultPath;
        }
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫:', error);
    } finally {
        updateDownloadButton();
    }
}

async function selectFolder() {
    try {
        const folder = await window.electronAPI.selectFolder();
        if (folder) {
            state.downloadFolder = folder;
            downloadPath.textContent = folder;
            downloadPath.title = folder;
            updateDownloadButton();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:', error);
        showError(downloadError, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏.');
    }
}

// –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const ProgressTracker = {
    currentProgress: 0,
    targetProgress: 0,
    animationFrameId: null,
    stages: {
        preparation: { start: 0, end: 5, label: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ' },
        video_init: { start: 5, end: 15, label: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ' },
        video_download: { start: 15, end: 50, label: '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤' },
        video_process: { start: 50, end: 60, label: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ' },
        audio_init: { start: 60, end: 65, label: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ' },
        audio_download: { start: 65, end: 80, label: '–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤' },
        audio_process: { start: 80, end: 85, label: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ' },
        merge_init: { start: 85, end: 88, label: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–ª–µ–π–∫–µ' },
        merge_process: { start: 88, end: 97, label: '–°–∫–ª–µ–π–∫–∞ —Ñ–∞–π–ª–æ–≤' },
        finalization: { start: 97, end: 100, label: '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è' }
    },

    reset() {
        this.currentProgress = 0;
        this.targetProgress = 0;
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
    },

    setProgress(progress, status) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        this.targetProgress = Math.min(100, Math.max(0, progress));

        // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–∞—è, —Ç–æ –∞–Ω–∏–º–∏—Ä—É–µ–º –ø–ª–∞–≤–Ω–æ
        if (Math.abs(this.targetProgress - this.currentProgress) > 0.5) {
            this.animateToTarget(status);
        } else {
            this.updateProgressBar(this.targetProgress, status);
        }
    },

    animateToTarget(status) {
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
        }

        const animate = () => {
            const diff = this.targetProgress - this.currentProgress;
            const step = diff * 0.1; // –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ 10% –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

            if (Math.abs(diff) > 0.1) {
                this.currentProgress += step;
                this.updateProgressBar(this.currentProgress, status);
                this.animationFrameId = requestAnimationFrame(animate);
            } else {
                this.currentProgress = this.targetProgress;
                this.updateProgressBar(this.currentProgress, status);
                this.animationFrameId = null;
            }
        };

        animate();
    },

    updateProgressBar(progress, status) {
        progressFill.style.width = `${progress}%`;
        progressPercent.textContent = `${Math.round(progress)}%`;

        if (status) {
            progressStatus.textContent = status;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.updateStages(progress);
    },

    updateStages(progress) {
        let activeStage = 'video';

        if (progress >= 85) {
            activeStage = 'merge';
        } else if (progress >= 60) {
            activeStage = 'audio';
        }

        // –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
        if (progress >= 60) {
            setStageCompleted('video');
        }
        if (progress >= 85) {
            setStageCompleted('audio');
        }
        if (progress >= 100) {
            setStageCompleted('merge');
        } else {
            setStageActive(activeStage);
        }
    },

    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É FFmpeg
    getProgressFromStatus(status) {
        if (!status) return null;

        const statusLower = status.toLowerCase();

        // –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —ç—Ç–∞–ø–æ–≤
        if (statusLower.includes('–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞') || statusLower.includes('–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è')) {
            return Math.random() * 10 + 5; // 5-15%
        }

        if (statusLower.includes('–≤–∏–¥–µ–æ') || statusLower.includes('video')) {
            if (statusLower.includes('–∑–∞–≥—Ä—É–∑') || statusLower.includes('download')) {
                return Math.random() * 35 + 15; // 15-50%
            }
            if (statusLower.includes('–æ–±—Ä–∞–±–æ—Ç') || statusLower.includes('process')) {
                return Math.random() * 10 + 50; // 50-60%
            }
        }

        // –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —ç—Ç–∞–ø–æ–≤
        if (statusLower.includes('–∞—É–¥–∏–æ') || statusLower.includes('audio')) {
            if (statusLower.includes('–∑–∞–≥—Ä—É–∑') || statusLower.includes('download')) {
                return Math.random() * 15 + 65; // 65-80%
            }
            if (statusLower.includes('–æ–±—Ä–∞–±–æ—Ç') || statusLower.includes('process')) {
                return Math.random() * 5 + 80; // 80-85%
            }
        }

        // –ê–Ω–∞–ª–∏–∑ —ç—Ç–∞–ø–æ–≤ —Å–∫–ª–µ–π–∫–∏
        if (statusLower.includes('—Å–∫–ª–µ–π') || statusLower.includes('merge') ||
            statusLower.includes('—Ñ–∏–Ω–∞–ª–∏–∑') || statusLower.includes('final')) {
            if (statusLower.includes('–ø–æ–¥–≥–æ—Ç–æ–≤–∫')) {
                return Math.random() * 3 + 85; // 85-88%
            }
            return Math.random() * 9 + 88; // 88-97%
        }

        return null;
    }
};

function updateProgress(value, status) {
    ProgressTracker.setProgress(value, status);
}


async function startDownload() {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
    if (downloadBtn.disabled || isDownloading) {
        return;
    }

    // Additional validation before starting
    if (!state.filePath) {
        showError(downloadError, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª M3U8');
        return;
    }
    if (state.selectedVideo === null || state.selectedVideo === undefined) {
        showError(downloadError, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ—Ä–æ–∂–∫—É');
        return;
    }
    if (!validateDownloadFolder(state.downloadFolder)) {
        showError(downloadError, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }
    if (!validateFileName(filenameInput.value)) {
        showError(downloadError, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ < > : " / \\ | ? *)');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    isDownloading = true;
    hideError(downloadError);
    resetProgress();
    progressContainer.style.display = 'block';
    downloadBtn.disabled = true;
    downloadBtn.textContent = '–°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è...';

    // –õ–æ–≥ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–≤–µ—Ä–Ω—É—Ç—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try {
        addLogEntry('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', 'info');

        // Set initial stage
        setStageActive('video');
        updateProgress(5, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...');

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π listener –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentProgressListener) {
            window.electronAPI.removeProgressListener();
        }

        // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        let lastRealProgress = 0;
        let progressSimulator = null;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const simulateProgress = (fromProgress, toProgress, duration = 2000) => {
            if (progressSimulator) {
                clearInterval(progressSimulator);
            }

            const steps = 20; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
            const stepTime = duration / steps;
            const stepSize = (toProgress - fromProgress) / steps;
            let currentStep = 0;

            progressSimulator = setInterval(() => {
                if (currentStep < steps) {
                    const simulatedProgress = fromProgress + (stepSize * currentStep);
                    updateProgress(simulatedProgress, `–ó–∞–≥—Ä—É–∑–∫–∞ ${Math.round(simulatedProgress)}%...`);
                    currentStep++;
                } else {
                    clearInterval(progressSimulator);
                    progressSimulator = null;
                }
            }, stepTime);
        };

        // Setup progress listener —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        currentProgressListener = (progressData) => {
            const { progress, status } = progressData;

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (progressSimulator) {
                clearInterval(progressSimulator);
                progressSimulator = null;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            lastRealProgress = progress;

            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ FFmpeg
            let smartProgress = ProgressTracker.getProgressFromStatus(status);
            if (smartProgress !== null && smartProgress > progress) {
                smartProgress = Math.min(smartProgress, progress + 10); // –ù–µ —É–±–µ–≥–∞–µ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            } else {
                smartProgress = progress;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —É–º–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            updateProgress(smartProgress, status || '–ó–∞–≥—Ä—É–∑–∫–∞...');

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (Math.abs(smartProgress - ProgressTracker.currentProgress) > 2 || status) {
                addLogEntry(`${Math.round(smartProgress)}% - ${status || '–ó–∞–≥—Ä—É–∑–∫–∞...'}`, 'info');
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const nextExpectedProgress = Math.min(smartProgress + 15, 95);
            if (nextExpectedProgress > smartProgress) {
                setTimeout(() => {
                    if (!progressSimulator && ProgressTracker.currentProgress < nextExpectedProgress) {
                        simulateProgress(ProgressTracker.currentProgress, nextExpectedProgress, 3000);
                    }
                }, 1000);
            }
        };

        window.electronAPI.onDownloadProgress(currentProgressListener);

        const payload = {
            filePath: state.filePath,
            videoIndex: state.selectedVideo,
            audioIndex: state.selectedAudio,
            outputDir: state.downloadFolder,
            filename: filenameInput.value.trim(),
            threads: Number(threadRange.value) || 1,
        };

        addLogEntry('–ó–∞–ø—É—Å–∫ FFmpeg –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤', 'info');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏
        updateProgress(2, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...');

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
        await new Promise(resolve => setTimeout(resolve, 500));
        updateProgress(5, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ...');

        // Start real download with progress tracking and timeout
        const downloadTimeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (10 –º–∏–Ω—É—Ç)')), 10 * 60 * 1000);
        });

        const downloadPromise = window.electronAPI.startDownload(payload);
        const result = await Promise.race([downloadPromise, downloadTimeoutPromise]);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        if (progressSimulator) {
            clearInterval(progressSimulator);
            progressSimulator = null;
        }

        if (!result || !result.success) {
            throw new Error(result?.error || '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π');
        }

        // –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —ç—Ç–∞–ø—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        updateProgress(95, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞...');
        await new Promise(resolve => setTimeout(resolve, 300));

        updateProgress(98, '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...');
        await new Promise(resolve => setTimeout(resolve, 200));

        // Complete all stages
        setStageCompleted('video');
        setStageCompleted('audio');
        setStageCompleted('merge');
        updateProgress(100, '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        state.downloadResultPath = result.output_path;
        addLogEntry(`–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${result.output_path}`, 'success');
        successSection.style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
        const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        addLogEntry(`–û—à–∏–±–∫–∞: ${message}`, 'error');
        showError(downloadError, `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: ${message}`);
        resetStages();
        progressContainer.style.display = 'none';
    } finally {
        // –í—Å–µ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isDownloading = false;
        downloadBtn.disabled = false;
        downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (progressSimulator) {
            clearInterval(progressSimulator);
            progressSimulator = null;
        }

        // Clean up progress listener
        if (currentProgressListener) {
            window.electronAPI.removeProgressListener();
            currentProgressListener = null;
        }
    }
}

async function showDownloadedFile() {
    if (!state.downloadResultPath) {
        return;
    }
    try {
        await window.electronAPI.showFile(state.downloadResultPath);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏:', error);
        showError(downloadError, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞.');
    }
}

function setupDragAndDrop() {
    dropZone.addEventListener('dragover', (event) => {
        event.preventDefault();
        dropZone.classList.add('dragover');
    });

    dropZone.addEventListener('dragleave', (event) => {
        event.preventDefault();
        dropZone.classList.remove('dragover');
    });

    dropZone.addEventListener('drop', (event) => {
        event.preventDefault();
        dropZone.classList.remove('dragover');
        const files = Array.from(event.dataTransfer.files || []);
        const file = files.find((item) => item.name.toLowerCase().endsWith('.m3u8'));
        if (file) {
            handleFile(file);
        } else {
            showError(errorMessage, '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .m3u8');
        }
    });

    dropZone.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', (event) => {
        const file = event.target.files?.[0];
        if (file) {
            handleFile(file);
        }
    });
}

function setupEvents() {
    if (!themeToggle || !downloadBtn || !nextBtn) {
        console.error('Critical DOM elements not found in setupEvents');
        return false;
    }

    themeToggle.addEventListener('click', toggleTheme);
    backBtn.addEventListener('click', goToPreviousStep);
    nextBtn.addEventListener('click', goToNextStep);
    if (analyzeBtn) analyzeBtn.addEventListener('click', analyzeFile);
    filenameInput.addEventListener('input', updateDownloadButton);
    threadRange.addEventListener('input', () => {
        updateThreadValue();
        updateDownloadButton();
    });
    downloadBtn.addEventListener('click', startDownload);
    selectFolderBtn.addEventListener('click', selectFolder);
    downloadPath.addEventListener('click', selectFolder);
    downloadPath.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault();
            selectFolder();
        } else if (event.key === ' ') {
            event.preventDefault();
            selectFolder();
        }
    });
    showFileBtn.addEventListener('click', showDownloadedFile);
    logToggle.addEventListener('click', toggleLog);
    return true;
}

function init() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    initDomElements();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!themeToggle || !dropZone || !downloadBtn) {
        console.error('Critical DOM elements not found, retrying in 100ms');
        setTimeout(init, 100);
        return;
    }

    applyTheme();
    setupDragAndDrop();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
    if (!setupEvents()) {
        console.error('Failed to setup events, retrying in 100ms');
        setTimeout(init, 100);
        return;
    }

    initializeDownloadPath();
    resetProgress();
    showStep('file-selection'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
if (document.readyState === 'loading') {
    window.addEventListener('DOMContentLoaded', init);
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    init();
}
